{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "id": "0dtebXSxbJUk",
        "outputId": "eb35cbb1-4567-4678-c399-d1d54865a7a4"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "\"\\nAuthor: Aditya Goel 400414715, MEST'21, McMaster University\\nSEP788/789: Neural Network and Development Tools\\nAssignment 3\\nReferences: \\n1. Dataset = https://www.kaggle.com/mczielinski/bitcoin-historical-data\\n2. Dr. Hamidreza Mahyar's Lecture Notes\\n3. https://machinelearningmastery.com/gentle-introduction-long-short-term-memory-networks-experts/\\n4. Youtube Channels: https://www.youtube.com/watch?v=UbvkhuqVqUI&t=926s&ab_channel=KrishNaik, \\n4.   \\n\""
            ]
          },
          "execution_count": 91,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "\"\"\"\n",
        "Author: Aditya Goel 400414715, MEST'21, McMaster University\n",
        "SEP788/789: Neural Network and Development Tools\n",
        "Assignment 3\n",
        "References: \n",
        "1. Dataset = https://www.kaggle.com/mczielinski/bitcoin-historical-data\n",
        "2. Dr. Hamidreza Mahyar's Lecture Notes\n",
        "3. https://machinelearningmastery.com/gentle-introduction-long-short-term-memory-networks-experts/\n",
        "4. Youtube Channels: https://www.youtube.com/watch?v=UbvkhuqVqUI&t=926s&ab_channel=KrishNaik\n",
        "\"\"\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DDaHiXamKN7a"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.layers import LSTM\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Flatten\n",
        "from tensorflow.keras.models import Sequential\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2w_ZdusscmtR"
      },
      "source": [
        "# **Load and clean Dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G_mDdEVRLq7r"
      },
      "outputs": [],
      "source": [
        "def load_clean_dataset():\n",
        "  dataset = pd.read_csv('./Original_Bitcoin_Dataset.csv')\n",
        "  print(\"Original dimension of the Close-price column is\", dataset['Close'].shape)\n",
        "\n",
        "  dataset = dataset.loc[dataset['Close'] > 0]                                   #Remove NaN Values\n",
        "  dataset = dataset.reset_index()                                               #Resets the row-number after the deletion of multiple rows\n",
        "  print(\"New dimension after removing NaN values is\", dataset['Close'].shape)\n",
        "  return dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WBQb5n1LJFzw"
      },
      "source": [
        "# **Convert timestamp to Date format**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m6kglLJXJJ_y"
      },
      "outputs": [],
      "source": [
        "def timestamp_to_date(dataset):\n",
        "  dataset['Timestamp']= pd.to_datetime(dataset['Timestamp'], unit='s')          #Convert timestamp to date\n",
        "  print('Dataset with replaced timstamp column looks like:')\n",
        "  print(dataset[['Timestamp','Close']])\n",
        "  return dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C2HshOlycqk2"
      },
      "source": [
        "# **Plot Close-price vs Date**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "stCTRiKXZNck"
      },
      "outputs": [],
      "source": [
        "def plot(dataset):\n",
        "  plt.figure(figsize=(20,5))\n",
        "  plt.xlabel('Date')                                                         \n",
        "  plt.ylabel('Close price')\n",
        "  plt.plot(dataset['Timestamp'], dataset['Close'])\n",
        "  print(\"Plot of Close-Price vs Date looks like:\")\n",
        "  plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m1Jmkogwf8Ob"
      },
      "source": [
        "# **Preprocess the Data**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7uJp3ehvf91i"
      },
      "outputs": [],
      "source": [
        "def normalise(dataset):\n",
        "  close_mean = np.mean(dataset['Close'])                                        \n",
        "  close_sd = np.std(dataset['Close'])\n",
        "  dataset['Close'] = (dataset['Close'] - close_mean) / close_sd                 #Standardize values with 0 mean and 1 variance\n",
        "  return dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "27uj2ZZHm4JT"
      },
      "source": [
        "# **Split into train and test**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Nu_iUw3bnOJo"
      },
      "outputs": [],
      "source": [
        "def split_train_test(dataset):\n",
        "  train, test = train_test_split(dataset['Close'], test_size=0.1, shuffle=False)    #in-biult sklearn method to split data into train and test with shuffle = False\n",
        "  test = test.reset_index()                                                         #reset index of test data    \n",
        "  test = test['Close']                                                              #remove additional index coloumn\n",
        "  print('The shape of Training Data is: ', train.shape)\n",
        "  print('The shape of Testing Data is: ', test.shape)\n",
        "  print(test)\n",
        "  return train, test"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YyuNmZA5ct4a"
      },
      "source": [
        "# **Data Preparation**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rfPbkKcnayXv"
      },
      "outputs": [],
      "source": [
        "def prepare_data(data, type):\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#Prepare data as Time-series inputs v/s Next close price\n",
        "\tX, y = [],[]\n",
        "\tfor i in range(len(data)):\n",
        "\t\tlast_day = i + 7\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#Taking data of 7 previous days\n",
        "\t\tif last_day > len(data)-1:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#For last value\n",
        "\t\t\tbreak\n",
        "\t\tprev_data, next_price = data[i:last_day], data[last_day]\t\t\t\t\t\t\t\t\t\t\n",
        "\t\tX.append(prev_data)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#Create Input set\n",
        "\t\ty.append(next_price)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#Create corresponding Output set\n",
        "\tif type == 'train':\n",
        "\t\tprint('X_train shape is:', np.array(X).shape)                                        \n",
        "\t\tprint('y_train shape is:', np.array(y).shape)\n",
        "\telse:\n",
        "\t\tprint(\"X_test shape is:\", np.array(X).shape)\n",
        "\t\tprint(\"y_test shape is:\", np.array(y).shape)\n",
        "\t\n",
        "\treturn np.array(X), np.array(y)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#Numpy conversion for sequential model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DHAMZVWAZMzc"
      },
      "source": [
        "# **Reshaping LSTM's input**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "v1I3Ffb4TvHb"
      },
      "outputs": [],
      "source": [
        "def reshape(X):\n",
        "  X = X.reshape((X.shape[0], X.shape[1], 1))                                    #reshape input to [Batch_size, Number_of_Timesteps, One_Timestep_at_a_time]\n",
        "  return X"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UbuuIWF2Zoqe"
      },
      "source": [
        "# **Plot y_Pred vs y**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-R0ZVSTQZvZs"
      },
      "outputs": [],
      "source": [
        "def plot_ypred(dataset, train_length, y_test, y_pred):\n",
        "  plt.figure(figsize=(20, 5))\n",
        "  plt.xlabel('Date')                                                         \n",
        "  plt.ylabel('Close Price')\n",
        "  plt.plot(dataset['Timestamp'][train_length+7:], y_test, label='y_test')          \n",
        "  plt.plot(dataset['Timestamp'][train_length+7:], y_pred, label='y_pred')          \n",
        "  plt.legend()                                                \n",
        "  plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ube4192_CZYn"
      },
      "source": [
        "# **Evaluate Loss Metrics**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WAA6j_nbCce9"
      },
      "outputs": [],
      "source": [
        "def loss_metrics(actual, pred):\n",
        "  rmse = np.sqrt(mean_squared_error(actual, pred))\n",
        "  mae = mean_absolute_error(actual, pred)\n",
        "  r2 = r2_score(actual, pred)\n",
        "  print(\"RMSE between y_pred and y is {}\".format(round(rmse, 3)))\n",
        "  print(\"Mean Absolute Error between y_pred and y is {}\".format(round(mae, 3)))\n",
        "  print(\"R2_Score between y_pred and y is {}\".format(round(r2, 3)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rz-xEpOWaW4r"
      },
      "source": [
        "# **Main Function**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "JuYvtxLkFvC8",
        "outputId": "a73137c8-ad46-480a-9c2b-de0f0c17e33e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original dimension of the Close-price column is (1048575,)\n",
            "New dimension after removing NaN values is (342169,)\n",
            "Dataset with replaced timstamp column looks like:\n",
            "                 Timestamp   Close\n",
            "0      2011-12-31 07:52:00    4.39\n",
            "1      2011-12-31 15:50:00    4.39\n",
            "2      2011-12-31 16:59:00    4.57\n",
            "3      2011-12-31 17:00:00    4.58\n",
            "4      2012-01-01 04:16:00    4.58\n",
            "...                    ...     ...\n",
            "342164 2013-12-28 12:02:00  734.55\n",
            "342165 2013-12-28 12:03:00  730.71\n",
            "342166 2013-12-28 12:04:00  730.51\n",
            "342167 2013-12-28 12:05:00  731.10\n",
            "342168 2013-12-28 12:06:00  734.00\n",
            "\n",
            "[342169 rows x 2 columns]\n",
            "Plot of Close-Price vs Date looks like:\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The shape of Training Data is:  (307952,)\n",
            "The shape of Testing Data is:  (34217,)\n",
            "0        2.932824\n",
            "1        2.932824\n",
            "2        2.929842\n",
            "3        2.929842\n",
            "4        2.929438\n",
            "           ...   \n",
            "34212    1.858998\n",
            "34213    1.844865\n",
            "34214    1.844129\n",
            "34215    1.846300\n",
            "34216    1.856973\n",
            "Name: Close, Length: 34217, dtype: float64\n",
            "X_train shape is: (307945, 7)\n",
            "y_train shape is: (307945,)\n",
            "X_test shape is: (34210, 7)\n",
            "y_test shape is: (34210,)\n",
            "Epoch 1/3\n",
            "9624/9624 [==============================] - 44s 4ms/step - loss: 0.0021\n",
            "Epoch 2/3\n",
            "9624/9624 [==============================] - 43s 4ms/step - loss: 5.2931e-05\n",
            "Epoch 3/3\n",
            "9624/9624 [==============================] - 43s 4ms/step - loss: 4.3043e-05\n",
            "1070/1070 [==============================] - 2s 2ms/step - loss: 1.9927e-04\n",
            "RMSE on test set is 0.014\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE between y_pred and y is 0.014\n",
            "Mean Absolute Error between y_pred and y is 0.009\n",
            "R2_Score between y_pred and y is 0.999\n"
          ]
        }
      ],
      "source": [
        "#Load, Preprocess, Split, Reshape\n",
        "dataset = load_clean_dataset()\n",
        "dataset = timestamp_to_date(dataset)\n",
        "plot(dataset)\n",
        "dataset = normalise(dataset)\n",
        "train, test = split_train_test(dataset)\n",
        "X_train, y_train = prepare_data(train, 'train')\n",
        "X_test, y_test = prepare_data(test, 'test') \n",
        "X_train = reshape(X_train)\n",
        "X_test = reshape(X_test)\n",
        "\n",
        "#Design LSTM Model\n",
        "model = Sequential()\n",
        "model.add(LSTM(50, activation='relu', input_shape=(7, 1)))\n",
        "model.add(Dense(1))\n",
        "model.compile(optimizer='adam', loss='mse')\n",
        "model.fit(X_train, y_train, epochs=3, verbose=1)\n",
        "\n",
        "#Evaluate Model\n",
        "mse = model.evaluate(X_test, y_test)\n",
        "rmse_test = np.sqrt(mse)\n",
        "print(\"RMSE on test set is {}\".format(round(rmse_test, 3)))\n",
        "\n",
        "#Predict y_pred, Plot results and Evaluate Loss metrics:\n",
        "y_pred = model.predict(X_test)\n",
        "plot_ypred(dataset, len(train), y_test, y_pred)\n",
        "loss_metrics(y_test, y_pred)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "NN_Assignment3",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
